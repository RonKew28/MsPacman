{"version":3,"sources":["webpack:///webpack/bootstrap 8fd0b9baa5986d4ae091","webpack:///./lib/board.js","webpack:///./lib/ms_pacman.js","webpack:///./lib/stationary_objects/stationary_object.js","webpack:///./lib/stationary_objects/small_dot.js","webpack:///./lib/stationary_objects/large_dot.js","webpack:///./lib/stationary_objects/player_score.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;;AAGL;;;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpfA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;AAKA,CAAC;;;;;;;;;;;;;;;ACpDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACdA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9BA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9BA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8fd0b9baa5986d4ae091","const Block = require('./blocks/block');\nconst UpperLeftCorner = require('./blocks/upper_left_corner');\nconst UpperRightCorner = require('./blocks/upper_right_corner');\nconst LowerLeftCorner = require('./blocks/lower_left_corner');\nconst LowerRightCorner = require('./blocks/lower_right_corner');\nconst UpperHorizontalBorder = require('./blocks/upper_horizontal_border');\nconst LowerHorizontalBorder = require('./blocks/lower_horizontal_border');\nconst LeftVerticalBorder = require('./blocks/left_vertical_border');\nconst RightVerticalBorder = require('./blocks/right_vertical_border');\nconst UpperLeftConnector = require('./blocks/upper_left_connector');\nconst UpperRightConnector = require('./blocks/upper_right_connector');\nconst LowerLeftConnector = require('./blocks/lower_left_connector');\nconst LowerRightConnector = require('./blocks/lower_right_connector');\nconst LeftUpperConnector = require('./blocks/left_upper_connector');\nconst LeftLowerConnector = require('./blocks/left_lower_connector');\nconst RightUpperConnector = require('./blocks/right_upper_connector');\nconst RightLowerConnector = require('./blocks/right_lower_connector');\nconst UpperLeftCornerSingle = require('./blocks/upper_left_corner_single');\nconst UpperRightCornerSingle = require('./blocks/upper_right_corner_single');\nconst LowerLeftCornerSingle = require('./blocks/lower_left_corner_single');\nconst LowerRightCornerSingle = require('./blocks/lower_right_corner_single');\nconst HorizontalBorderSingle = require('./blocks/horizontal_border_single');\nconst VerticalBorderSingle = require('./blocks/vertical_border_single');\n\nconst MovingObject = require('./moving_objects/moving_object');\nconst Pacman = require('./moving_objects/pacman');\nconst Blinky = require('./moving_objects/blinky');\n\nconst StationaryObject = require('./stationary_objects/stationary_object');\nconst SmallDot = require('./stationary_objects/small_dot');\nconst LargeDot = require('./stationary_objects/large_dot');\nconst PlayerScore = require('./stationary_objects/player_score');\n\nconst Node = require('./node');\n\nclass Board {\n  constructor(grid, ctx, gtx, ptx, blinkytx, dotstx, scoretx) {\n    this.blocks = [];\n    this.intersections = {};\n    this.intersectionsArray = [];\n    this.cageNodes = {};\n    this.cageCorridor = {};\n    this.wallCollisions = {};\n    this.stationaryObjects = {};\n    this.levelDim = [];\n    this.ghostRespawn = [];\n    this.nodes = {};\n\n    this.grid = grid;\n    this.ctx = ctx;\n    this.gtx = gtx;\n    this.ptx = ptx;\n    this.blinkytx = blinkytx;\n    this.dotstx = dotstx;\n    this.scoretx = scoretx;\n\n    this.movingObjectsArr = [];\n    this.stationaryObjectsArr = [];\n    this.setBoardDims();\n\n  }\n\n  drawGrid() {\n    this.gtx.strokeStyle = 'grey';\n    var dx = 20;\n    var dy = 20;\n\n    for (let x = 0; x <= this.grid[0].length; x++) {\n      let startXPos = $('#grid-layer').position().left + (x * dx);\n      let startYPos = $('#grid-layer').position().top;\n      let endYPos = startYPos + (this.grid.length * dy);\n      this.gtx.setLineDash([2, 3]);\n      this.gtx.moveTo(startXPos, startYPos);\n      this.gtx.lineTo(startXPos, endYPos);\n    }\n\n    for (let y = 0; y <= this.grid.length; y++) {\n      let startXPos = $('#grid-layer').position().left;\n      let startYPos = $('#grid-layer').position().top + (y * dy);\n      let endXPos = startXPos + (this.grid[0].length * dx);\n      this.gtx.setLineDash([2, 3]);\n      this.gtx.moveTo(startXPos, startYPos);\n      this.gtx.lineTo(endXPos, startYPos);\n    }\n\n    this.gtx.stroke();\n  }\n\n  setBoardDims() {\n    var dx = 20;\n    var dy = 20;\n    var dimX = this.grid[0].length;\n    var dimY = this.grid.length;\n    var startXPos = $(\"#grid-layer\").position().left;\n    var startYPos = $(\"#grid-layer\").position().top;\n    this.levelDim = [ [startXPos, startXPos + (dimX * dx)], [startYPos, startYPos + (dimY * dy)] ];\n  }\n\n  isOutOfBounds(pos) {\n    if ( (pos[0] < this.levelDim[0][0] + 1) || (pos[0] > this.levelDim[0][1]) ) {\n      return true;\n    }\n  }\n\n  addWallCollision(x, y) {\n    var dx = 20;\n    var dy = 20;\n    var collisionPosX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n    var collisionPosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n    var collisionPos = [collisionPosX, collisionPosY];\n    collisionPos = JSON.stringify(collisionPos);\n    this.wallCollisions[\"\" + collisionPos] = 1;\n  }\n\n  isBlankSquare(value) {\n    if (value === 0 || value === \"P\" || value === \"I\" || value === \"N\" || value === 97 || value === 96) {\n      return true;\n    }\n  }\n\n  isCageObject(value) {\n    if (value === \"E\" || value === \"C\" || value === \"B\") {\n      return true;\n    }\n  }\n\n\n\n  addIntersection(posX, posY) {\n    var intersectionPos = [posX, posY];\n    this.intersections[\"\" + JSON.stringify(intersectionPos)] = 1;\n    this.intersectionsArray.push(intersectionPos);\n  }\n\n\n  isIntersection(x, y) {\n    return (this.isBlankSquare(this.grid[y+1][x]) || this.isBlankSquare(this.grid[y-1][x]) && this.isBlankSquare(this.grid[y][x+1]) || this.isBlankSquare(this.grid[y][x-1]));\n  }\n\n  buildWalls(x, y) {\n    let pos = [x, y];\n    let ctx = this.ctx;\n\n    if(this.grid[y][x] === 1) {\n      var block = new LeftVerticalBorder(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -1) {\n      var block = new RightVerticalBorder(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 2) {\n      var block = new UpperHorizontalBorder(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -2) {\n      var block = new LowerHorizontalBorder(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 3) {\n      var block = new UpperLeftConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -3) {\n      var block = new LowerLeftConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 4) {\n      var block = new UpperRightConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -4) {\n      var block = new LowerRightConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 5) {\n      var block = new UpperLeftCorner(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -5) {\n      var block = new LowerLeftCorner(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 6) {\n      var block = new UpperRightCorner(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -6) {\n      var block = new LowerRightCorner(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 7) {\n      var block = new UpperLeftCornerSingle(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -7) {\n      var block = new LowerLeftCornerSingle(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 8) {\n      var block = new UpperRightCornerSingle(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === -8) {\n      var block = new LowerRightCornerSingle(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 9) {\n      var block = new HorizontalBorderSingle(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 10) {\n      var block = new VerticalBorderSingle(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 11) {\n      var block = new LeftUpperConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 12) {\n      var block = new LeftLowerConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 13) {\n      var block = new RightUpperConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n\n    if(this.grid[y][x] === 14) {\n      var block = new RightLowerConnector(pos, ctx);\n      this.blocks.push(block);\n      this.addWallCollision(x, y);\n    }\n  }\n\n  initializeMovingObjects(x, y) {\n    let dx = 20;\n    let dy = 20;\n\n    if(this.grid[y][x] === \"P\") {\n      var posX = $('#level-layer').position().left + 1 + (x * dx) + dx;\n      var posY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n      var msPacman = new Pacman([posX, posY], [posX, posY], [0,0], this.sprites, this, this.ptx, this.gtx, this.dotstx);\n      this.movingObjectsArr.push(msPacman);\n    }\n\n    if(this.grid[y][x] === \"B\") {\n\n      var posX = $('#level-layer').position().left + 1 + (x * dx) + dx;\n      var posY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n      var blinky = new Blinky([posX, posY], [posX, posY], [0,0], this.sprites, this, this.blinkytx, this.gtx, this.dotstx);\n      this.movingObjectsArr.push(blinky);\n    }\n  }\n\n  initializeNodes(x, y) {\n    let dx = 20;\n    let dy = 20;\n    if(this.isBlankSquare(this.grid[y][x])) {\n      var posX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n      var posY = $('#level-layer').position().top  + 1 + (y * dy) + (dy / 2);\n      var node = new Node([posX, posY]);\n      this.nodes['' + JSON.stringify([posX, posY])] = node;\n\n      if(this.isBlankSquare(this.grid[y][x + 1])) {\n        var neighborPosX = $(\"#level-layer\").position().left + 1 + ((x + 1) * dx) + (dx / 2);\n        var neighborPosY = $(\"#level-layer\").position().top + 1 + (y * dy) + (dy / 2);\n        node.addNeighbor(new Node([ neighborPosX, neighborPosY]));\n      }\n\n      if(this.isBlankSquare(this.grid[y][x - 1])) {\n        var neighborPosX = $(\"#level-layer\").position().left + 1 + ((x - 1) * dx) + (dx / 2);\n        var neighborPosY = $(\"#level-layer\").position().top + 1 + (y * dy) + (dy / 2);\n        node.addNeighbor(new Node([ neighborPosX, neighborPosY]));\n      }\n\n      if(this.isBlankSquare(this.grid[y + 1][x])) {\n        var neighborPosX = $(\"#level-layer\").position().left + 1 + (x * dx) + (dx / 2);\n        var neighborPosY = $(\"#level-layer\").position().top + 1 + ((y + 1) * dy) + (dy / 2);\n        node.addNeighbor(new Node([ neighborPosX, neighborPosY]));\n      }\n\n      if(this.isBlankSquare(this.grid[y - 1][x])) {\n        var neighborPosX = $(\"#level-layer\").position().left + 1 + (x * dx) + (dx / 2);\n        var neighborPosY = $(\"#level-layer\").position().top + 1 + ((y - 1) * dy) + (dy / 2);\n        node.addNeighbor(new Node([ neighborPosX, neighborPosY]));\n      }\n\n      if(this.isCageObject(this.grid[y][x + 1])) {\n        var neighborPosX = $('#level-layer').position().left + 1 + ((x + 1) * dx) + dx;\n        var neighborPosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n        var neighborNode = new Node([neighborPosX, neighborPosY]);\n\n        var dividerNodePosX = $('#level-layer').position().left + 1 + ((x + 1) * dx) + (dx / 2);\n        var dividerNodePosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n        var dividerNode = new Node([dividerNodePosX, dividerNodePosY]);\n\n        dividerNode.addNeighbor(neighborNode);\n        dividerNode.addNeighbor(node);\n        node.addNeighbor(dividerNode);\n        this.nodes['' + JSON.stringify([dividerNodePosX, dividerNodePosY])] = dividerNode;\n      }\n\n      if(this.isCageObject(this.grid[y][x - 1])) {\n        var neighborPosX = $('#level-layer').position().left + 1 + ((x - 2) * dx) + dx;\n        var neighborPosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n        var neighborNode = new Node([neighborPosX, neighborPosY]);\n\n        var dividerNodePosX = $('#level-layer').position().left + 1 + ((x - 1) * dx) + (dx / 2);\n        var dividerNodePosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n        var dividerNode = new Node([dividerNodePosX, dividerNodePosY]);\n\n        dividerNode.addNeighbor(neighborNode);\n        dividerNode.addNeighbor(node);\n        node.addNeighbor(dividerNode);\n        this.nodes['' + JSON.stringify([dividerNodePosX, dividerNodePosY])] = dividerNode;\n      }\n\n      if (this.isIntersection(x, y)) {\n        var xPosX = $('#level-layer').position().left + 1 + (x * dx) + (dy / 2);\n        var xPosY = $('#level-layer').position().left + 1 + (y * dy) + (dy / 2);\n        this.addIntersection(xPosX, xPosY);\n      }\n\n    }\n  }\n\n  initializeCage(x, y) {\n    let dx = 20;\n    let dy = 20;\n     if(this.isCageObject(this.grid[y][x]) && !this.isCageObject(this.grid[y][x-1])) {\n          var posX = $('#level-layer').position().left + 1 + (x * dx) + dx;\n          var posY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n          var node = new Node([posX, posY]);\n          this.nodes['' + JSON.stringify([posX, posY])] = node;\n\n          if(this.isBlankSquare(this.grid[y][x + 1])) {\n            var neighborPosX = $('#level-layer').position().left + 1 + ((x + 1) * dx) + (dx / 2);\n            var neighborPosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n            var neighborNode =  new Node([neighborPosX, neighborPosY]);\n            node.addNeighbor(neighborNode);\n          }\n          if(this.isBlankSquare(this.grid[y][x - 1])) {\n            var neighborPosX = $('#level-layer').position().left + 1 + ((x - 1) * dx) + (dx / 2);\n            var neighborPosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n            var neighborNode =  new Node([neighborPosX, neighborPosY]);\n            var dividerNodePosX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n            var dividerNodePosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n            var dividerNode = new Node([dividerNodePosX, dividerNodePosY]);\n            node.addNeighbor(dividerNode);\n          }\n\n          if(this.isBlankSquare(this.grid[y + 1][x])) {\n            var neighborPosX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n            var neighborPosY = $('#level-layer').position().top + 1 + ((y + 1) * dy) + (dy / 2);\n            var neighborNode =  new Node([neighborPosX, neighborPosY]);\n            node.addNeighbor(neighborNode);\n          }\n\n          if(this.isBlankSquare(this.grid[y - 1][x])) {\n            var neighborPosX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n            var neighborPosY = $('#level-layer').position().top + 1 + ((y - 1) * dy) + (dy / 2);\n            var neighborNode =  new Node([neighborPosX, neighborPosY]);\n            node.addNeighbor(neighborNode);\n          }\n\n          if(this.isCageObject(this.grid[y][x +1])) {\n            if(this.isBlankSquare(this.grid[y][x + 2])) {\n              var neighborPosX = $('#level-layer').position().left + 1 + ((x + 2) * dx) + (dx / 2);\n              var neighborPosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n              var neighborNode =  new Node([neighborPosX, neighborPosY]);\n\n              var dividerNodePosX = $('#level-layer').position().left + 1 + ((x + 1) * dx) + (dx / 2);\n              var dividerNodePosY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n              var dividerNode = new Node([dividerNodePosX, dividerNodePosY]);\n              node.addNeighbor(dividerNode);\n            }\n          }\n\n          if(this.isCageObject(this.grid[y-1][x])) {\n            var neighborPosX = $('#level-layer').position().left + 1 + (x * dx) + dx;\n            var neighborPosY = $('#level-layer').position().top + 1 + ((y -1) * dy) + (dy / 2);\n            var neighborNode =  new Node([neighborPosX, neighborPosY]);\n            node.addNeighbor(neighborNode);\n          }\n\n          if(this.isCageObject(this.grid[y+1][x])) {\n            var neighborPosX = $('#level-layer').position().left + 1 + (x * dx) + dx;\n            var neighborPosY = $('#level-layer').position().top + 1 + ((y + 1) * dy) + (dy / 2);\n            var neighborNode =  new Node([neighborPosX, neighborPosY]);\n            node.addNeighbor(neighborNode);\n          }\n          var intersectionPos = JSON.stringify([posX, posY]);\n          this.cageNodes[\"\" + intersectionPos] = 1;\n        }\n\n        if(this.isCageObject(this.grid[y][x])) {\n          var posX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n          var posY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n          this.cageCorridor['' + JSON.stringify([posX, posY])] = 1;\n        }\n  }\n\n  createDots(x, y) {\n    let dx = 20;\n    let dy = 20;\n    if (this.grid[y][x] === 0) {\n      var posX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n      var posY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n      var dot = new SmallDot([posX, posY], this.sprites, this.dotstx);\n      this.stationaryObjects[[posX, posY]] = dot;\n    }\n\n    if (this.grid[y][x] === 96) {\n      var posX = $('#level-layer').position().left + 1 + (x * dx) + (dx / 2);\n      var posY = $('#level-layer').position().top + 1 + (y * dy) + (dy / 2);\n      var dot = new LargeDot([posX, posY], this.sprites, this.dotstx);\n      this.stationaryObjects[[posX, posY]] = dot;\n    }\n  }\n\n  createScoreBoard() {\n    var posX = $('#score-layer').position().left + 470;\n    var posY = $('#score-layer').position().top + 230;\n    var playerScore = new PlayerScore([posX, posY], this.sprites, this.dotstx, this.scoretx, this);\n    this.stationaryObjects[['playerScore']] = playerScore;\n  }\n\n  initialize() {\n    this.createScoreBoard();\n    let statObjs = this.stationaryObjects;\n    for (let y = 0; y < this.grid.length; y++) {\n      for (let x = 0; x < this.grid[0].length; x++) {\n        this.buildWalls(x, y);\n        this.createDots(x, y);\n        this.initializeNodes(x, y);\n        this.initializeCage(x, y);\n        this.initializeMovingObjects(x, y);\n      }\n    }\n\n    this.blocks.forEach(function(block) {\n      block.draw();\n    });\n    Object.keys(statObjs).forEach(function(key) {\n      var stationaryObject = statObjs[key];\n      stationaryObject.draw();\n    });\n\n    this.movingObjectsArr.forEach(function(movingObject) {\n      movingObject.draw();\n    });\n\n\n  }\n\n\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 2\n// module chunks = 0","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\nconst Board = require('./board');\nconst Grids = require('./grids');\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n\n  const grid = new Grids();\n  this.levelDimX = grid.LEVEL_ONE_GRID[0].length * 20 + 2;\n  this.levelDimY = grid.LEVEL_ONE_GRID.length * 20 + 2;\n\n  var playerEl = document.getElementById(\"player-layer\");\n  playerEl.width = this.levelDimX;\n  playerEl.height = this.levelDimY;\n  const ptx = playerEl.getContext(\"2d\");\n\n  var gridEl = document.getElementById(\"grid-layer\");\n  gridEl.width = this.levelDimX;\n  gridEl.height = this.levelDimY;\n  const gtx = gridEl.getContext(\"2d\");\n\n  var dotsEl = document.getElementById(\"dots-layer\");\n  dotsEl.width = this.levelDimX;\n  dotsEl.height = this.levelDimY;\n  const dotstx = dotsEl.getContext(\"2d\");\n\n  var canvasEl = document.getElementById(\"level-layer\");\n  canvasEl.width = this.levelDimX;\n  canvasEl.height = this.levelDimY;\n  const ctx = canvasEl.getContext(\"2d\");\n\n  var blinkyEl = document.getElementById(\"blinky-layer\");\n  blinkyEl.width = this.levelDimX;\n  blinkyEl.height = this.levelDimY;\n  const blinkytx = blinkyEl.getContext(\"2d\");\n\n  var scoreEl = document.getElementById(\"score-layer\");\n  scoreEl.width = this.levelDimX;\n  scoreEl.height = this.levelDimY;\n  const scoretx = scoreEl.getContext(\"2d\");\n\n\nconst board = new Board(grid.LEVEL_ONE_GRID, ctx, gtx, ptx, blinkytx, dotstx, scoretx);\nboard.drawGrid();\nboard.initialize();\n\nconst game = new Game(board, board.movingObjectsArr[1], board.movingObjectsArr[0], board.stationaryObjectsArr);\nnew GameView(game, ctx).start();\n\n\n\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/ms_pacman.js\n// module id = 30\n// module chunks = 0","class StationaryObject {\n  constructor(pos, sprites, dotstx, scoretx) {\n    this.pos = pos;\n    this.sprites = sprites;\n    this.dotstx = dotstx;\n    this.scoretx = scoretx;\n    this.spritesLocations = {\n      smallDot: [392, 250, 14, 14],\n      largeDot: [389, 295, 20, 20],\n      playerScore: [389, 295, 20, 20]\n    };\n  }\n}\n\nmodule.exports = StationaryObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/stationary_objects/stationary_object.js\n// module id = 34\n// module chunks = 0","const StationaryObject = require('./stationary_object');\n\nclass SmallDot extends StationaryObject {\n  constructor(pos, sprites, dotstx) {\n    super(pos, sprites, dotstx);\n    this.avatar = this.spritesLocations['smallDot'];\n  }\n\n  draw() {\n    const smallDotImg = new Image();\n    smallDotImg.src = 'sprites/mspacman_sprites_2.png';\n    smallDotImg.onload = () => {\n      let dx = 20;\n      let dy = 20;\n\n      var sx = this.avatar[0];\n      var sy = this.avatar[1];\n      var destX = this.pos[0] - (dx / 4);\n      var destY = this.pos[1] - (dy / 4);\n      var sWidth = this.avatar[2];\n      var sHeight = this.avatar[3];\n      var destWidth = dx / 2;\n      var destHeight = dy / 2;\n\n      this.dotstx.clearRect(destX, destY, destWidth, destHeight);\n      this.dotstx.drawImage(smallDotImg, sx, sy, sWidth, sHeight, destX, destY, destWidth, destHeight);\n    };\n  }\n}\n\nmodule.exports = SmallDot;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/stationary_objects/small_dot.js\n// module id = 35\n// module chunks = 0","const StationaryObject = require('./stationary_object');\n\nclass LargeDot extends StationaryObject {\n  constructor(pos, sprites, dotstx) {\n    super(pos, sprites, dotstx);\n    this.avatar = this.spritesLocations['largeDot'];\n  }\n\n  draw() {\n    const largeDotImg = new Image();\n    largeDotImg.src = 'sprites/mspacman_sprites_2.png';\n    largeDotImg.onload = () => {\n      let dx = 20;\n      let dy = 20;\n\n      var sx = this.avatar[0];\n      var sy = this.avatar[1];\n      var destX = this.pos[0] - (dx / 2);\n      var destY = this.pos[1] - (dy / 2);\n      var sWidth = this.avatar[2];\n      var sHeight = this.avatar[3];\n      var destWidth = dx;\n      var destHeight = dy;\n\n      this.dotstx.clearRect(destX, destY, destWidth, destHeight);\n      this.dotstx.drawImage(largeDotImg, sx, sy, sWidth, sHeight, destX, destY, destWidth, destHeight);\n    };\n  }\n}\n\nmodule.exports = LargeDot;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/stationary_objects/large_dot.js\n// module id = 36\n// module chunks = 0","const StationaryObject = require('./stationary_object');\n\nclass PlayerScore extends StationaryObject {\n  constructor(pos, sprites, dotstx, scoretx) {\n    super(pos, sprites, dotstx, scoretx);\n    this.avatar = this.spritesLocations['playerScore'];\n    this.score = 0;\n  }\n\n  drawScore() {\n   this.scoretx.font = '25px arcadePixelated';\n   this.scoretx.fillStyle = 'white';\n   let scoreText = \"Score: \" + this.score;\n   this.scoretx.fillText(scoreText, this.pos[0], this.pos[1] + 10);\n }\n\n\n  draw() {\n    this.scoretx.clearRect(0, 0, 1000, 1000);\n    this.drawScore();\n  }\n}\n\nmodule.exports = PlayerScore;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/stationary_objects/player_score.js\n// module id = 37\n// module chunks = 0"],"sourceRoot":""}